{"version":3,"file":"tree.js","sources":["../../../tree/src/tree.ts"],"sourcesContent":["import { isBoolean } from '@bear-ui/utils'\nimport { ExtractPropTypes, InjectionKey, PropType, SetupContext } from 'vue'\nexport type Key = number | string\nexport interface TreeNode extends Required<TreeOption> {\n  level: number\n  rawNode: TreeOption\n  children: TreeNode[]\n  isLeaf: boolean\n  parentKey: Key | undefined\n}\nexport interface TreeOption {\n  label?: Key\n  key?: Key\n  children?: TreeOption[]\n  isLeaf?: boolean\n  disabled?: boolean\n  [key: string]: unknown\n}\nexport const treeProps = {\n  data: {\n    type: Array as PropType<TreeOption[]>,\n    default: () => []\n  },\n  defaultExpandedKeys: {\n    type: Array as PropType<Key[]>,\n    default: () => []\n  },\n  labelField: {\n    type: String,\n    default: 'label'\n  },\n  keyField: {\n    type: String,\n    default: 'key'\n  },\n  childrenField: {\n    type: String,\n    default: 'children'\n  },\n  onLoad: Function as PropType<(node: TreeOption) => Promise<TreeOption[]>>,\n  selectedKeys: {\n    type: Array as PropType<Key[]>\n  },\n  selectable: {\n    type: Boolean,\n    default: true\n  },\n  multiple: {\n    type: Boolean,\n    default: false\n  },\n  defaultCheckedKeys: {\n    type: Array as PropType<Key[]>,\n    default: () => []\n  },\n  showCheckbox: {\n    type: Boolean,\n    default: false\n  }\n} as const\nexport const treeNodeProps = {\n  node: {\n    type: Object as PropType<TreeNode>,\n    required: true\n  },\n  expanded: {\n    type: Boolean,\n    required: true\n  },\n  loadingKeys: {\n    type: Object as PropType<Set<Key>>\n  },\n  selectedKeys: {\n    type: Array as PropType<Key[]>,\n    default: () => []\n  },\n  showCheckbox: {\n    type: Boolean,\n    required: false\n  },\n  checked: Boolean,\n  disabled: Boolean,\n  indeterminate: Boolean\n} as const\nexport const treeNodeEmitts = {\n  toggle: (node: TreeNode) => node,\n  select: (node: TreeNode) => node,\n  check: (node: TreeNode, value: boolean) => isBoolean(value)\n}\nexport const treeEmitts = {\n  'update:selectedKeys': (keys: Key[]) => keys\n}\nexport type treeNodeProps = Partial<ExtractPropTypes<typeof treeProps>>\nexport type TreeProps = Partial<ExtractPropTypes<typeof treeProps>>\nexport interface TreeContext {\n  slots: SetupContext['slots'] // 插槽属性\n  // emit: SetupContext['emit']\n}\nexport const treeInjectKey: InjectionKey<TreeContext> = Symbol()\nexport const treeNodeContentProps = {\n  node: {\n    type: Object as PropType<TreeNode>,\n    required: true\n  }\n} as const\n"],"names":["isBoolean"],"mappings":";;;AAkBO,MAAM,YAAY;AAAA,EACvB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,MAAM,CAAC;AAAA,EAClB;AAAA,EACA,qBAAqB;AAAA,IACnB,MAAM;AAAA,IACN,SAAS,MAAM,CAAC;AAAA,EAClB;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AAAA,EACA,QAAQ;AAAA,EACR,cAAc;AAAA,IACZ,MAAM;AAAA,EACR;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,SAAS,MAAM,CAAC;AAAA,EAClB;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AACF;AACO,MAAM,gBAAgB;AAAA,EAC3B,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,EACZ;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,EACZ;AAAA,EACA,aAAa;AAAA,IACX,MAAM;AAAA,EACR;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,MAAM,CAAC;AAAA,EAClB;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,UAAU;AAAA,EACZ;AAAA,EACA,SAAS;AAAA,EACT,UAAU;AAAA,EACV,eAAe;AACjB;AACO,MAAM,iBAAiB;AAAA,EAC5B,QAAQ,CAAC,SAAmB;AAAA,EAC5B,QAAQ,CAAC,SAAmB;AAAA,EAC5B,OAAO,CAAC,MAAgB,UAAmBA,MAAAA,UAAU,KAAK;AAC5D;AACO,MAAM,aAAa;AAAA,EACxB,uBAAuB,CAAC,SAAgB;AAC1C;AAOO,MAAM,gBAA2C,OAAO;AACxD,MAAM,uBAAuB;AAAA,EAClC,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,EACZ;AACF;;;;;;;"}