{"version":3,"file":"tree.vue.js","sources":["../../../tree/src/tree.vue?vue&type=script&setup=true&lang.ts"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createBlock as _createBlock, withCtx as _withCtx, createVNode as _createVNode, normalizeClass as _normalizeClass, createElementBlock as _createElementBlock } from \"vue\"\n\nimport {\n  Key,\n  TreeNode,\n  TreeOption,\n  treeProps,\n  treeEmitts,\n  treeInjectKey\n} from './tree.ts'\n\nimport {\n  ref,\n  watch,\n  computed,\n  provide,\n  useSlots,\n  onMounted\n} from 'vue'\nimport { createNamespace } from '@bear-ui/hooks'\nimport BTreeNode from './treeNode.vue'\nimport BVirtualList from '@bear-ui/components/virtual-list'\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'tree',\n  props: treeProps,\n  emits: treeEmitts,\n  setup(__props, { emit }) {\n\nconst props = __props;\n\ndefineOptions({\n  name: 'b-tree'\n})\nconst bem = createNamespace('tree')\n\nconst tree = ref<TreeNode[]>([])\nfunction createOptions(key: string, label: string, children: string) {\n  return {\n    getKey(node: TreeOption) {\n      return node[key] as string\n    },\n    getLabel(node: TreeOption) {\n      return node[label] as string\n    },\n    getChildren(node: TreeOption) {\n      return node[children] as TreeOption[]\n    }\n  }\n}\nconst TreeOptions = createOptions(\n  props.keyField,\n  props.labelField,\n  props.childrenField\n)\nfunction createTree(data: TreeOption[], parent: TreeNode | null = null) {\n  //console.log('叠', parent)\n  function traversal(data: TreeOption[], parent: TreeNode | null = null) {\n    return data.map(node => {\n      const children = TreeOptions.getChildren(node) || []\n      const treeNode: TreeNode = {\n        key: TreeOptions.getKey(node),\n        label: TreeOptions.getLabel(node),\n        children: [],\n        rawNode: node,\n        level: parent ? parent.level + 1 : 0,\n        isLeaf: node.isLeaf ?? children.length == 0,\n        disabled: !!node.disabled,\n        parentKey: parent?.key\n      }\n      if (children.length > 0) {\n        treeNode.children = traversal(children, treeNode)\n      }\n      // console.log('levele', treeNode)\n      return treeNode\n    })\n  }\n  const result: TreeNode[] = traversal(data, parent)\n  return result\n}\nwatch(\n  () => props.data,\n  (data: TreeOption[]) => {\n    tree.value = createTree(data)\n    //console.log(tree.value)\n  },\n  { immediate: true }\n)\nconst expandedKeysSet = ref(new Set(props.defaultExpandedKeys))\nconst flattenTree = computed(() => {\n  const expandedKeys = expandedKeysSet.value\n  const flattenNodes: TreeNode[] = []\n  const nodes = tree.value || []\n  const stack: TreeNode[] = []\n  for (let i = nodes.length - 1; i >= 0; --i) {\n    stack.push(nodes[i])\n  }\n  while (stack.length) {\n    const node = stack.pop()\n    if (!node) continue\n    flattenNodes.push(node)\n    if (expandedKeys.has(node.key)) {\n      const children = node.children\n      if (children) {\n        for (let i = node.children.length - 1; i >= 0; --i) {\n          stack.push(node.children[i])\n        }\n      }\n    }\n  }\n  return flattenNodes\n})\nfunction isExpanded(node: TreeNode): boolean {\n  return expandedKeysSet.value.has(node.key)\n}\n//折叠\nfunction collpase(node: TreeNode) {\n  expandedKeysSet.value.delete(node.key)\n}\nconst loadingKeysRef = ref(new Set<Key>())\n//异步加载\nfunction triggerLoading(node: TreeNode) {\n  //console.log('13123', loadingKeysRef)\n  if (!node.children.length && !node.isLeaf) {\n    const loadingKeys = loadingKeysRef.value\n    if (!loadingKeys.has(node.key)) {\n      loadingKeys.add(node.key)\n      const onLoad = props.onLoad\n      if (onLoad) {\n        onLoad(node.rawNode).then((children: TreeNode) => {\n          // console.log('111', children)\n          node.rawNode.children = children\n          node.children = createTree(children, node)\n          loadingKeys.delete(node.key)\n        })\n      }\n    }\n  }\n}\n//展开\nfunction expand(node: TreeNode) {\n  expandedKeysSet.value.add(node.key)\n  // console.log('1node', node)\n  triggerLoading(node)\n}\nfunction toggleExpand(node: TreeNode) {\n  const expandKeys = expandedKeysSet.value\n  if (expandKeys.has(node.key) && !loadingKeysRef.value.has(node.key)) {\n    collpase(node)\n  } else {\n    expand(node)\n  }\n}\n\nconst selectKeysRef = ref<Key[]>([])\n//console.log(selectKeysRef.value)\n\nwatch(\n  () => props.selectedKeys,\n  value => {\n    if (value) {\n      selectKeysRef.value = value\n      // console.log('jiantimng', value)\n    }\n  },\n  {\n    immediate: true\n  }\n)\nfunction handleSelect(node: TreeNode) {\n  let keys = Array.from(selectKeysRef.value)\n  if (!props.selectable) return\n  if (props.multiple) {\n    const index = keys.findIndex(key => key === node.key)\n    if (index > -1) {\n      keys.splice(index, 1)\n    } else {\n      keys.push(node.key)\n    }\n  } else {\n    if (keys.includes(node.key)) {\n      keys = []\n    } else {\n      keys = [node.key]\n    }\n  }\n  emit('update:selectedKeys', keys)\n}\nprovide(treeInjectKey, { slots: useSlots() })\nconst checkedKeysRefs = ref(new Set(props.defaultCheckedKeys))\nfunction isChecked(node: TreeNode) {\n  return checkedKeysRefs.value.has(node.key)\n}\nfunction isDiabled(node: TreeNode) {\n  return !!node.disabled\n}\nconst indeterminateKeySet = ref<Set<Key>>(new Set())\nfunction isIndeterminate(node: TreeNode) {\n  return indeterminateKeySet.value.has(node.key)\n}\nfunction toggle(node: TreeNode, checked: boolean) {\n  if (!node) return\n  // console.log('gouuxuan', checkedKeysRefs, checked)\n  const checkKeys = checkedKeysRefs.value\n  if (checked) {\n    indeterminateKeySet.value.delete(node.key)\n  }\n  checkKeys[checked ? 'add' : 'delete'](node.key)\n  const children = node.children\n  if (children) {\n    children.forEach((childNode: any) => {\n      if (!childNode.disabled) {\n        toggle(childNode, checked)\n      }\n    })\n  }\n}\nfunction findNode(key: Key) {\n  return flattenTree.value.find(node => node.key === key)\n}\n\nfunction updateCheckedKeys(node: TreeNode) {\n  if (node.parentKey) {\n    //有⽗key 存在\n    const parentNode = findNode(node.parentKey) //找到⽗节点\n    if (parentNode) {\n      let allChecked = true\n      let hasChecked = false\n      const nodes = parentNode.children\n      for (const node of nodes) {\n        if (checkedKeysRefs.value.has(node.key)) {\n          // 孩⼦被 选中\n          hasChecked = true\n        } else if (indeterminateKeySet.value.has(node.key)) {\n          //孩⼦是半选\n          allChecked = false\n          hasChecked = true\n        } else {\n          allChecked = false\n        }\n      }\n      if (allChecked) {\n        checkedKeysRefs.value.add(parentNode.key)\n        indeterminateKeySet.value.delete(parentNode.key)\n      } else if (hasChecked) {\n        indeterminateKeySet.value.add(parentNode.key)\n        checkedKeysRefs.value.delete(parentNode.key)\n      } else {\n        checkedKeysRefs.value.delete(parentNode.key)\n        indeterminateKeySet.value.delete(parentNode.key)\n      }\n      updateCheckedKeys(parentNode) // ⾃ ⼰搞定再看⽗级\n    }\n  }\n}\n\nfunction toggleCheck(node: TreeNode, checked: boolean) {\n  // console.log(flattenTree)\n  //console.log(node, checked)\n  toggle(node, checked)\n  updateCheckedKeys(node)\n}\nonMounted(() => {\n  checkedKeysRefs.value.forEach((key: Key) => {\n    toggle(findNode(key)!, true)\n  })\n})\n\n//console.log(flattenTree.value)\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass(_unref(bem).b())\n  }, [\n    _createVNode(_unref(BVirtualList), {\n      items: _unref(flattenTree),\n      remain: 8,\n      size: 35\n    }, {\n      default: _withCtx(({ node }) => [\n        (_openBlock(), _createBlock(BTreeNode, {\n          key: node.key,\n          node: node,\n          expanded: isExpanded(node),\n          \"loading-keys\": loadingKeysRef.value,\n          \"selected-keys\": selectKeysRef.value,\n          \"show-checkbox\": _ctx.showCheckbox,\n          checked: isChecked(node),\n          disabled: isDiabled(node),\n          indeterminate: isIndeterminate(node),\n          onToggle: toggleExpand,\n          onSelect: handleSelect,\n          onCheck: toggleCheck\n        }, null, 8, [\"node\", \"expanded\", \"loading-keys\", \"selected-keys\", \"show-checkbox\", \"checked\", \"disabled\", \"indeterminate\"]))\n      ]),\n      _: 1\n    }, 8, [\"items\"])\n  ], 2))\n}\n}\n\n})"],"names":["_defineComponent","treeProps","treeEmitts","createNamespace","tree","ref","data","parent","watch","computed","index","provide","treeInjectKey","useSlots","node","onMounted","_openBlock","_createElementBlock","_normalizeClass","_unref","_createVNode","BVirtualList","_withCtx","_createBlock","BTreeNode"],"mappings":"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"}